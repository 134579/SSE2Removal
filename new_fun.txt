define <8 x i16> @llvm_x86_sse2_psrli_w(<8 x i16> %x, i32 %y) {
	%newY = trunc i32 %y to i16
	%1 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0> , i16 %newY ,i32 0
	%2 = insertelement <8 x i16> %1 , i16 %newY, i32 1
	%3 = insertelement <8 x i16> %2 , i16 %newY, i32 2
	%4 = insertelement <8 x i16> %3 , i16 %newY, i32 3
	%5 = insertelement <8 x i16> %4 , i16 %newY, i32 4
	%6 = insertelement <8 x i16> %5 , i16 %newY, i32 5
	%7 = insertelement <8 x i16> %6 , i16 %newY, i32 6
	%8 = insertelement <8 x i16> %7 , i16 %newY, i32 7

	%result = lshr <8 x i16> %x,  %8
	ret <8 x i16> %result
}


define <16 x i8> @llvm_x86_sse2_packuswb_128(<8 x i16> %x, <8 x i16> %y) {
		
	%high8 = trunc <8 x i16> %y to <8 x i8>
	%low8 = trunc <8 x i16> %x to <8 x i8>
	%result = shufflevector <8 x i8> %low8, <8 x i8> %high8, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7 ,i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

	ret <16 x i8> %result

}

define <8 x i16> @llvm_x86_sse2_pslli_w(<8 x i16> %x, i32 %y) {
	%newY = trunc i32 %y to i16
	%tmp = bitcast i16 %newY to <1 x i16>
	%yArray = shufflevector <1 x i16> %tmp, <1 x i16> <i16 0> ,  <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 >
	%result = shl <8 x i16> %x,  %yArray
	ret <8 x i16> %result
}

define <2 x i64> @llvm_x86_sse2_psrli_q(<2 x i64> %x, i32 %y) {
	%newY = zext i32 %y to i64
	%1 = insertelement <2 x i64> <i64 0, i64 0> , i64 %newY ,i32 0
	%2 = insertelement <2 x i64> %1 , i64 %newY, i32 1
	%result = lshr <2 x i64> %x,  %2
	ret <2 x i64> %result
}



define  <2 x i64> @llvm_x86_sse2_psrl_dq(<2 x i64> %x, i32 %y) {

	%newY = zext i32 %y to i128
;	%step = mul i128 %newY , 8 ; conflicts with intel sse2 ISA

	%newX = bitcast <2 x i64> %x to i128
	%newX1 = lshr i128 %newX, %newY

	%result = bitcast i128 %newX1 to <2 x i64>
	ret <2 x i64> %result

}



define <2 x i64> @llvm_x86_sse2_psll_dq(<2 x i64> %x, i32 %y) {
	
	%step = zext i32 %y to i128
;	%step = mul i128 %newY , 8 ; conflicts with intel sse2 ISA

	%newX = bitcast <2 x i64> %x to i128
	%newX1 = shl i128 %newX, %step

	%result = bitcast i128 %newX1 to <2 x i64>
	ret <2 x i64> %result
}


define i32 @llvm_x86_sse2_pmovmskb_128(<16 x i8> %x) {
	%msb = lshr <16 x i8> %x, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
	%tmp = trunc <16 x i8> %msb to <16 x i1>
	%result16 = bitcast <16 x i1> %tmp to i16
	%result = zext i16 %result16 to i32 
	ret i32 %result
}


define <2 x i64> @llvm_x86_sse2_pslli_q(<2 x i64> %x, i32 %y) {
	%newY = zext i32 %y to i64
	%1 = insertelement <2 x i64> <i64 0, i64 0> , i64 %newY ,i32 0
	%2 = insertelement <2 x i64> %1 , i64 %newY, i32 1
	%result = shl <2 x i64> %x,  %2
	ret <2 x i64> %result
}


define i32 @llvm_x86_sse2_movmsk_pd(<2 x double> %x) {
	%x0 = extractelement <2 x double> %x, i32 0
	%x1 = extractelement <2 x double> %x, i32 1
	%i0 = bitcast double %x0 to i64
	%i1 = bitcast double %x1 to i64
	%msb0 = lshr i64 %i0, 63
	%msb1 = lshr i64 %i1, 63

	%1 = mul i64 %msb1, 2
	%2 = add i64 %1, %msb0
	%result = trunc i64 %2 to i32
	ret i32 %result
}



define <4 x i32> @llvm_x86_sse2_psrli_d(<4 x i32> %x, i32 %y) {
	%1 = insertelement <4 x i32> <i32 0, i32 0, i32 0, i32 0> , i32 %y ,i32 0
	%2 = insertelement <4 x i32> %1 , i32 %y, i32 1
	%3 = insertelement <4 x i32> %2 , i32 %y, i32 2
	%4 = insertelement <4 x i32> %3 , i32 %y, i32 3

	%result = lshr <4 x i32> %x,  %4
	ret <4 x i32> %result
}


define i64 @absSum(<8 x i8> %x) {
	%ptri = alloca i32
	store i32 0, i32* %ptri

	%ptrsum = alloca i64
	store i64 0, i64* %ptrsum
	br label %loop

loop:
	%i = load i32* %ptri
	%sum = load i64* %ptrsum

	%value = extractelement <8 x i8> %x, i32 %i
	%sign = icmp slt i8 %value, 0
	br i1 %sign, label %lt0, label %ge0

lt0:
	%con = xor i8 %value, -1
	%abs = add i8 %con, 1
	%abs64_1 = zext i8 %abs to i64
	%newsum_1 = add i64 %sum, %abs64_1
	store i64 %newsum_1, i64* %ptrsum
	br label %end

ge0:
	%abs64_2 = zext i8 %value to i64
	%newsum_2 = add i64 %sum, %abs64_2
	store i64 %newsum_2, i64* %ptrsum
	br label %end

end:
	%newi = add i32 %i, 1
	store i32 %newi, i32* %ptri
	%stop = icmp eq i32 %newi, 8
	br i1 %stop, label %exit, label %loop

exit:
	%abssum = load i64* %ptrsum
	ret i64 %abssum
	
}

define <2 x i64> @llvm_x86_sse2_psad_bw(<16 x i8> %x, <16 x i8> %y) {
	%1 = sub <16 x i8> %x , %y
	%2 = shufflevector <16 x i8> %1, <16 x i8> %1, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
	%3 = shufflevector <16 x i8> %1, <16 x i8> %1, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
	%abssum0 = call i64 @absSum(<8 x i8> %2)
	%abssum1 = call i64 @absSum(<8 x i8> %3)
	%4 = insertelement <2 x i64> <i64 0, i64 0> , i64 %abssum0, i32 0
	%result = insertelement <2 x i64> %4, i64 %abssum1, i32 1

	ret <2 x i64> %result
}



define  <2 x i64> @llvm_x86_sse2_psrl_q(<2 x i64> %x, <2 x i64> %y) {
	%result = lshr <2 x i64> %x,  %y
	ret <2 x i64> %result

}


define <2 x i64> @llvm_x86_sse2_psll_q(<2 x i64> %x, <2 x i64> %y) {
	%result = shl <2 x i64> %x,  %y
	ret <2 x i64> %result
}
